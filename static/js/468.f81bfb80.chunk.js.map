{"version":3,"file":"static/js/468.f81bfb80.chunk.js","mappings":"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","sources":["components/movie/MovieCard.js","pages/MovieDetailPage.js"],"sourcesContent":["import React from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { tmdbAPI } from \"../../config\";\r\nimport Button from \"../button/Button\";\r\n\r\nconst MovieCard = ({ item }) => {\r\n    const { title, vote_average, release_date, poster_path, id } = item;\r\n    const navigate = useNavigate();\r\n\r\n    return (\r\n      <div className=\"movie-card flex flex-col rounded-lg p-3 bg-slate-800 text-white h-full select-none\">\r\n        <img\r\n          src={tmdbAPI.image500(poster_path)}\r\n          alt=\"\"\r\n          className=\"w-full h-[250px] object-cover rounded-lg mb-5\"\r\n        />\r\n        <div className=\"flex flex-col flex-1\">\r\n          <h3 className=\"text-xl font-bold mb-3\">{title}</h3>\r\n          <div className=\"flex items-center justify-between text-sm opacity-50 mb-10\">\r\n            <span>{new Date(release_date).getFullYear()}</span>\r\n            <span>{vote_average}</span>\r\n          </div>\r\n          <Button onClick={()=> navigate(`/movie/${id}`)} widthFull>Watch now</Button>\r\n        </div>\r\n      </div>\r\n    );\r\n};\r\n\r\nexport default MovieCard;\r\n","import React from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { SwiperSlide,Swiper } from \"swiper/react\";\r\nimport useSWR from \"swr\";\r\nimport MovieCard from \"../components/movie/MovieCard\";\r\nimport {fetcher, tmdbAPI } from \"../config\";\r\n\r\nconst MovieDetailPage = () => {\r\n  const { movieId } = useParams();\r\n  const { data } = useSWR(\r\n    tmdbAPI.getMovieDetail(movieId),\r\n    fetcher\r\n  );\r\n  if (!data) return null;\r\n  const { backdrop_path, poster_path, title, genres, overview } = data;\r\n\r\n  return (\r\n    <div className=\"pb-10\">\r\n      <div className=\"w-full h-[600px] relative\">\r\n        <div className=\"absolute inset-0 bg-black bg-opacity-70\"></div>\r\n        <div\r\n          className=\"w-full h-full bg-cover bg-no-repeat\"\r\n          style={{\r\n            backgroundImage: `url(https://image.tmdb.org/t/p/original/${backdrop_path})`,\r\n          }}\r\n        ></div>\r\n      </div>\r\n      <div className=\"w-full max-w-[800px] mx-auto h-[500px] relative -mt-[250px] pb-10 z-10\">\r\n        <img\r\n          className=\"w-full h-full object-cover rounded-xl\"\r\n          src={tmdbAPI.imageOriginal(poster_path)}\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n      <h1 className=\"text-center font-bold text-4xl text-white mb-10\">\r\n        {title}\r\n      </h1>\r\n      {genres.length > 0 && (\r\n        <div className=\"flex items-center justify-center gap-x-5 mb-10\">\r\n          {genres.map((item) => (\r\n            <span\r\n              className=\"py-2 px-4 border border-primary text-primary rounded-md\"\r\n              key={item.id}\r\n            >\r\n              {item.name}\r\n            </span>\r\n          ))}\r\n        </div>\r\n      )}\r\n      <p className=\"text-center leading-relaxed max-w-[700px] mx-auto mb-10\">\r\n        {overview}\r\n      </p>\r\n      <MovieCredits></MovieCredits>\r\n      <MovieVideos></MovieVideos>\r\n      <MovieSimilar></MovieSimilar>\r\n    </div>\r\n  );\r\n};\r\n\r\n// list casts\r\nfunction MovieCredits() {\r\n  const { movieId } = useParams();\r\n  const { data } = useSWR(\r\n    tmdbAPI.getMovieMeta(movieId,\"credits\"),\r\n    fetcher\r\n  );\r\n  if (!data) return null;\r\n  const { cast } = data;\r\n\r\n  return (\r\n    <div className=\"p-10\">\r\n      <h2 className=\"text-center font-medium text-3xl mb-10\">Casts</h2>\r\n      <div className=\"grid grid-cols-4 gap-5\">\r\n        {cast &&\r\n          cast.length > 0 &&\r\n          cast.slice(0, 4).map((item) => (\r\n            <div className=\"cast-item\" key={item.id}>\r\n              <img\r\n                className=\"w-full h-[350px] rounded object-cover mb-3\"\r\n                src={tmdbAPI.imageOriginal(item.profile_path)}\r\n                alt=\"\"\r\n              />\r\n              <h3 className=\"text-xl font-medium\">{item.name}</h3>\r\n            </div>\r\n          ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction MovieVideos() {\r\n  const { movieId } = useParams();\r\n  const { data } = useSWR(\r\n    tmdbAPI.getMovieMeta(movieId,\"videos\"),\r\n    fetcher\r\n  );\r\n  if (!data) return null;\r\n  const { results } = data;\r\n  if (!results || results.length <= 0) return null;\r\n\r\n  return (\r\n    <div className=\"py-10\">\r\n      <div className=\"flex flex-col gap-10\">\r\n        {results.slice(0, 1).map((item) => (\r\n          <div className=\"text-center\" key={item.id}>\r\n            <h2 className=\"text-center font-medium text-3xl mb-10\">Trailer</h2>\r\n            <div\r\n              className=\"w-full max-w-[1280px] mx-auto aspect-video\"\r\n              key={item.id}\r\n            >\r\n              <iframe\r\n                width=\"1464\"\r\n                height=\"563\"\r\n                src={`https://www.youtube.com/embed/${item.key}`}\r\n                title={item.name}\r\n                frameBorder=\"0\"\r\n                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\r\n                allowFullScreen\r\n                className=\"w-full h-full object-fill\"\r\n              ></iframe>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction MovieSimilar() {\r\n  const { movieId } = useParams();\r\n  const { data, error } = useSWR(\r\n    tmdbAPI.getMovieMeta(movieId,\"similar\"),\r\n    fetcher\r\n  );\r\n  if (!data) return null;\r\n  const { results } = data;\r\n  if (!results || results.length <= 0) return null;\r\n\r\n  return (\r\n    <div className=\"py-10\">\r\n      <h2 className=\"text-center font-medium text-3xl mb-10\">Movie similar</h2>\r\n      <div className=\"movie-list\">\r\n        <Swiper grabCursor={\"true\"} spaceBetween={40} slidesPerView={\"auto\"}>\r\n          {results.length > 0 &&\r\n            results.map((item) => (\r\n              <SwiperSlide key={item.id}>\r\n                <MovieCard item={item}></MovieCard>\r\n              </SwiperSlide>\r\n            ))}\r\n        </Swiper>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default MovieDetailPage;\r\n"],"names":["item","title","vote_average","release_date","poster_path","id","navigate","useNavigate","className","src","tmdbAPI","alt","Date","getFullYear","onClick","widthFull","MovieCredits","movieId","useParams","data","useSWR","fetcher","cast","length","slice","map","profile_path","name","MovieVideos","results","width","height","key","frameBorder","allow","allowFullScreen","MovieSimilar","error","grabCursor","spaceBetween","slidesPerView","backdrop_path","genres","overview","style","backgroundImage"],"sourceRoot":""}